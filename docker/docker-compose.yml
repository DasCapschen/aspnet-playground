version: '3'
services:
  web:
    image: aspnet-playground
    ports: 
      - "8182:80"

  db:
    image: postgres:13.2-alpine
    volumes:
      - 'aspnet_playground_db_volume:/var/lib/postgresql/data'
    # Note:
    # in production env, it would probably be better to use
    # POSTGRES_PASSWORD_FILE=/path/to/a/file/in/container
    # having copied that file into the docker image at some point
    environment:
      - POSTGRES_PASSWORD=container
      - POSTGRES_USER=docker
      - POSTGRES_DB=playground
    
  dotnet_shell:
    image: aspnet-playground-dotnet-shell
    volumes: 
      - '../src:/src'
    working_dir: /src
    command: bash

  devcontainer:
    #use the devcontainer Dockerfile
    build:
      context: ../
      # relative to context!!
      dockerfile: .devcontainer/Dockerfile
      args:
        VARIANT: "5.0"
        INSTALL_NODE: "false"
        INSTALL_AZURE_CLI: "false"
        UID: ${UID}
        GID: ${GID}
    # Overrides default command so things don't shut down after the process ends.
    # yes, this is what microsoft recommends! (https://code.visualstudio.com/docs/remote/create-dev-container#_use-docker-compose)
    command: /bin/sh -c "while sleep 1000; do :; done"
    # mount our project in the container, and cache that
    # relative to docker-compose.yml path, NOT relative to context!!
    volumes:
      - ..:/workspace:cached
    working_dir: /workspace
    # run on the same network as db so they can connect!
    network_mode: service:db

volumes:
  aspnet_playground_db_volume: